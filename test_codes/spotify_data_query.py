import spotipy
from spotipy.oauth2 import SpotifyOAuth
import pandas as pd
import os
from dotenv import load_dotenv
from datetime import datetime

print("üéµ Spotify Adatok Lek√©rdez√©se")
print("=" * 50)

# ===============================================
# 1. KAPCSOLAT L√âTREHOZ√ÅSA
# ===============================================

load_dotenv()
CLIENT_ID = os.getenv('SPOTIFY_CLIENT_ID')
CLIENT_SECRET = os.getenv('SPOTIFY_CLIENT_SECRET')
REDIRECT_URI = os.getenv('SPOTIFY_REDIRECT_URI')

# Scope meghat√°roz√°sa, hogy milyen adatokat k√©r√ºnk le (https://developer.spotify.com/documentation/web-api/concepts/scopes)
SCOPE = "user-read-recently-played user-read-private user-top-read "

# Spotify kliens l√©trehoz√°sa
sp = spotipy.Spotify(
    auth_manager=SpotifyOAuth(
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET,
        redirect_uri=REDIRECT_URI,
        scope=SCOPE,
        cache_path="../.cache-test"
    )
)

print("‚úÖ Spotify kapcsolat l√©trehozva")

# ===============================================
# 2. LEGUT√ìBBI 50 DAL LEK√âRDEZ√âSE
# ===============================================

print("\nüì• Legut√≥bbi dalok lek√©rdez√©se...")

try:
    # A Spotify API h√≠v√°s - ez adja vissza a legut√≥bb hallgatott dalokat
    results = sp.current_user_recently_played(limit=50)

    print(f"‚úÖ Sikeresen lek√©rdezve {len(results['items'])} dal")

    # ===============================================
    # 3. ADATOK FELDOLGOZ√ÅSA T√ÅBL√ÅZATHOZ
    # ===============================================

    print("\nüîÑ Adatok feldolgoz√°sa t√°bl√°zatos form√°ra...")

    # √úres lista l√©trehoz√°sa - ide fogjuk gy≈±jteni az adatokat
    songs_data = []

    # V√©gigmegy√ºnk minden dal√≥n √©s kigy≈±jtj√ºk a fontos adatokat
    for item in results['items']:
        # Az 'item' egy komplex objektum, amib≈ël kiv√°lasztjuk a sz√ºks√©ges r√©szeket
        track = item['track']  # A dal inform√°ci√≥i

        # Egy sor adatot k√©sz√≠t√ºnk minden dalhoz
        song_info = {
            'name': track['name'],  # A dal c√≠me
            'artist': track['artists'][0]['name'],  # Az els≈ë el≈ëad√≥ neve
            'album': track['album']['name'],  # Album n√©v
            'played_at': item['played_at'],  # Mikor hallgattad meg
            'duration_ms': track['duration_ms'],  # Dal hossza milliszekundumban
            'popularity': track['popularity'],  # N√©pszer≈±s√©g 0-100 sk√°l√°n
            'explicit': track['explicit'],  # Van-e k√°romkod√°s benne
            'song_id': track['id']  # Egyedi azonos√≠t√≥
        }

        # Hozz√°adjuk ezt a sort az adataink list√°j√°hoz
        songs_data.append(song_info)

    print(f"‚úÖ {len(songs_data)} dal adatai feldolgozva")

    # ===============================================
    # 4. T√ÅBL√ÅZAT (DATAFRAME) L√âTREHOZ√ÅSA
    # ===============================================

    print("\nüìä T√°bl√°zat l√©trehoz√°sa...")

    # A pandas DataFrame egy olyan t√°bl√°zat, amivel k√∂nnyen tudsz dolgozni
    df = pd.DataFrame(songs_data)

    # N√©h√°ny hasznos √°talak√≠t√°s:

    # A) D√°tum oszlop olvashat√≥bb form√°ban
    df['played_at'] = pd.to_datetime(df['played_at'])
    df['date'] = df['played_at'].dt.strftime('%Y-%m-%d %H:%M')

    # B) Dal hossza percben √©s m√°sodpercben
    df['duration_mins'] = (df['duration_ms'] / 1000 / 60).round(2)

    print("‚úÖ T√°bl√°zat l√©trehozva!")

    # ===============================================
    # 5. T√ÅBL√ÅZAT MEGJELEN√çT√âSE √âS ELEMZ√âSE
    # ===============================================

    print("\nüìã T√ÅBL√ÅZAT MEGJELEN√çT√âSE")
    print("=" * 50)

    # Az els≈ë 10 dal megjelen√≠t√©se
    print("üéµ ELS≈ê 10 LEGUT√ìBB HALLGATOTT DAL:")
    print("-" * 80)

    # Csak a fontosabb oszlopokat jelen√≠tj√ºk meg
    display_columns = ['name', 'artist', 'date', 'duration_mins', 'popularity']
    print(df[display_columns].head(10).to_string(index=False))

    print("\nüìä ALAPSTATISZTIK√ÅK:")
    print("-" * 30)
    print(f"üìà √ñsszesen hallgatott dalok: {len(df)}")
    print(f"üé§ K√ºl√∂nb√∂z≈ë el≈ëad√≥k: {df['artist'].nunique()}")
    print(f"üíø K√ºl√∂nb√∂z≈ë albumok: {df['album'].nunique()}")
    print(f"‚è±Ô∏è  √Åtlagos dal hossz: {df['duration_mins'].mean():.2f} perc")
    print(f"üåü √Åtlagos n√©pszer≈±s√©g: {df['popularity'].mean():.1f}/100")

    print("\nüèÜ TOP 5 EL≈êAD√ì (leggyakrabban hallgatott):")
    top_artists = df['artist'].value_counts().head(5)
    for i, (artist, count) in enumerate(top_artists.items(), 1):
        print(f"   {i}. {artist}: {count} dal")

    print("\nüéµ LEGUT√ìBBI 5 DAL:")
    latest_songs = df.head(5)
    for i, row in latest_songs.iterrows():
        print(f"   ‚Ä¢ {row['name']} - {row['artist']} ({row['date']})")

    # ===============================================
    # 6. ADATOK MENT√âSE F√ÅJLBA
    # ===============================================

    print(f"\nüíæ ADATOK MENT√âSE")
    print("-" * 30)

    # CSV f√°jlba ment√©s (Excel-ben is megnyithat√≥)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"spotify_recent_tracks_{timestamp}.csv"

    # Mappa l√©trehoz√°sa ha nem l√©tezik
    os.makedirs('../data', exist_ok=True)

    # F√°jlba √≠r√°s
    df.to_csv(f'data/{filename}', index=False, encoding='utf-8')
    print(f"‚úÖ Adatok mentve: data/{filename}")

    # Excel form√°tumba is (ha telep√≠tve van az openpyxl)
    try:
        excel_filename = f"spotify_recent_tracks_{timestamp}.xlsx"
        df.to_excel(f'data/{excel_filename}', index=False)
        print(f"‚úÖ Excel f√°jl is mentve: data/{excel_filename}")
    except ImportError:
        print("‚ÑπÔ∏è  Excel ment√©shez telep√≠tsd: pip install openpyxl")

    # ===============================================
    # 7. T√ÅBL√ÅZAT B√ñNG√âSZ√âSE √âS KERES√âS
    # ===============================================

    print(f"\nüîç T√ÅBL√ÅZAT B√ñNG√âSZ√âSE")
    print("-" * 30)

    # P√©lda: Adott el≈ëad√≥ dalainak keres√©se
    print("P√©lda keres√©sek:")

    # Legn√©pszer≈±bb dalok (80+ n√©pszer≈±s√©g)
    popular_songs = df[df['popularity'] >= 80]
    if not popular_songs.empty:
        print(f"\nüåü Nagy n√©pszer≈±s√©g≈± dalok (80+): {len(popular_songs)} db")
        print(popular_songs[['name', 'artist', 'popularity']].head(3).to_string(index=False))

    # Hossz√∫ dalok (5+ perc)
    long_songs = df[df['duration_mins'] >= 5.0]
    if not long_songs.empty:
        print(f"\n‚è±Ô∏è  Hossz√∫ dalok (5+ perc): {len(long_songs)} db")
        print(long_songs[['name', 'artist', 'duration_mins']].head(3).to_string(index=False))

    print(f"\nüéâ K√âSZ! Az adatok sikeresen lek√©rdezve √©s feldolgozva!")
    print(f"üìÅ A f√°jlok itt tal√°lhat√≥k: data/ mappa")
    print(f"üìä A 'df' v√°ltoz√≥ban van a teljes t√°bl√°zat - ezzel tov√°bb tudsz dolgozni")

except Exception as e:
    print(f"‚ùå Hiba t√∂rt√©nt: {e}")
    print("Ellen≈ërizd, hogy hallgatt√°l-e dalokat az ut√≥bbi id≈ëben!")

# ===============================================
# 8. K√ñVETKEZ≈ê L√âP√âSEK √âS TIPPEK
# ===============================================

print(f"\nüí° K√ñVETKEZ≈ê L√âP√âSEK √âS TIPPEK")
print("=" * 50)
print("""
PYCHARM HASZN√ÅLAT:
1. A 'df' v√°ltoz√≥ tartalmazza az adatokat
2. √öj cell√°ban √≠rd be: print(df.head()) - els≈ë 5 sor
3. Oszlopok list√°ja: print(df.columns.tolist())
4. Adott oszlop: print(df['dal_neve'])

HASZNOS PANDAS PARANCSOK:
‚Ä¢ df.info() - t√°bl√°zat √°ltal√°nos inf√≥i
‚Ä¢ df.describe() - sz√°mszer≈± statisztik√°k
‚Ä¢ df.shape - sorok √©s oszlopok sz√°ma
‚Ä¢ df['oszlop_neve'].unique() - egyedi √©rt√©kek

K√ñVETKEZ≈ê PROJEKTR√âSZEK:
1. Audio features lek√©rdez√©se (danceability, energy, stb.)
2. Top tracks k√ºl√∂nb√∂z≈ë id≈ëszakokra
3. Automatikus napi lek√©rdez√©s
4. Power BI kapcsolat kialak√≠t√°sa

F√ÅJLOK:
‚Ä¢ CSV: Excel-ben megnyithat√≥, Power BI-ban import√°lhat√≥
‚Ä¢ data/ mapp√°ban tal√°lod a mentett f√°jlokat
""")

print("üöÄ Most m√°r k√©szen √°llsz a k√∂vetkez≈ë l√©p√©sre!")

